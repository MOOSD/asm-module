### 3.1.2 字节码指令
字节码指令由一个标识该指令的操作码和固定数目的参数组成：
- 操作码是一个无符号字节值——即字节代码名，由注记符号标识
- 参数是静态值，确定了精确的指令行为，紧跟在操作码之后
字节码指令大致可以分为两类，一类指令用于局部变量和操作数栈之间传递值。另一类用于对操作数栈的值
进行弹出和计算，并压入栈中。

常见的局部变量操作指令有：
- ILOAD：用于加载 boolean、int、byte、short 和 char 类型的局部变量到操作数栈
- FLOAD：用于加载 float 类型局部变量到操作数栈
- LLOAD：用于加载 lang 类型局部变量到操作数栈，需要加载两个槽 slot
- DLOAD：用于加载 double 类型局部变量到操作数栈，需要加载两个槽 slot
- ALOAD：用于加载非基础类型的局部变量到操作数栈，比如对象之类的

常见的操作数栈指令有：
- ISTORE：从操作数栈弹出 boolean、int、byte、short 和 char 类型的局部变量，并将它存储在由其索引 i 指定的局部变量中
- FSTORE：从操作数栈弹出 float 类型的局部变量，并将它存储在由其索引 i 指定的局部变量中
- LSTORE：从操作数栈弹出 long 类型的局部变量，并将它存储在由其索引 i 指定的局部变量中
- DSTORE：从操作数栈弹出 double 类型的局部变量，并将它存储在由其索引 i 指定的局部变量中
- ASTORE：用于弹出非基础类型的局部变量，并将它存储在由其索引 i 指定的局部变量中

通过上面可以看到，每种对应的数据类型都对应不同的 `XLOAD` 或 `XSTORE`。这是为了保证不会执行
非法的转换。
- 将一个值存储在局部变量表中，在以不同的类型加载它是非法操作，比如存入 ISTORE 类型，使用 FLOAD 加载
- 如果向一个局部变量表中的位置存储一个值，而这个值不同于原来的存储类型，这种操作是合法的

**以上两个特性，意味着：一个局部变量的类型，可能在方法执行期间发生变化。**比如你在方法的最后读取局部变量，可能实际类型
已经发生变化。

[常见字节码指令介绍可以参照 Java 虚拟机指令](https://docs.oracle.com/javase/specs/jvms/se7/html/index.html)



